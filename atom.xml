<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Life is now.</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-01-02T13:58:16.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>程超</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GitHub Pages+Hexo搭建博客</title>
    <link href="http://yoursite.com/2017/01/02/GitHub%20Pages+Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/01/02/GitHub Pages+Hexo搭建博客/</id>
    <published>2017-01-02T12:20:00.000Z</published>
    <updated>2017-01-02T13:58:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 是一个简单地、轻量地、基于Node的一个静态博客框架，可以方便的生成静态网页托管在Github和Heroku上；GitHub Pages 可以被认为是用户编写的、托管在github上的静态网页。由于它的空间免费稳定，可以用于介绍托管在Github上的Project或者搭建网站。本文为一个简易的教程。<br><a id="more"></a></p>
<hr>
<h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><h3 id="安装Node"><a href="#安装Node" class="headerlink" title="安装Node"></a>安装Node</h3><p><strong>Hexo</strong>是基于<strong>Node</strong>的，所以首先的安装Node.js，去官网去下载一个安装包就好<a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a>。如果你还没有安装过<strong>Git</strong>，推荐你安装一个<a href="https://msysgit.github.io" target="_blank" rel="external">Git</a>。安装好之后打开<strong>Git Bash</strong>，使用以下命令就可以查看<strong>Node</strong>是否装好。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ node -v</div><div class="line">v6.9.2</div></pre></td></tr></table></figure></p>
<p><strong>Node</strong>的一个提高效率的工具就是<strong>npm</strong>，全称是<strong>Node Package Manager</strong>  ，是一个<strong>Node.js</strong>包管理和分发工具，已经成为了非官方的发布Node模块（包）的标准。如果你熟悉Ruby的gem，Python的pypi、setuptools，PHP的pear，那么你就知道NPM的作用是什么了。<strong>Git Bash</strong>，使用以下命令就可以查看<strong>npm</strong>的版本。在刚刚安装<strong>node</strong>的时候，<strong>npm</strong>已经装好了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm -v</div><div class="line">3.10.9</div></pre></td></tr></table></figure></p>
<p>接下了你就可以使用<strong>npm install</strong>来安装基于<strong>node</strong>的第三方包了，和<strong>*nix</strong>系统的命令行工具类似。但是由于国内的网络环境，建议将<strong>node</strong>的安装源设为阿里的同步镜像源。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure></p>
<p>然后就可以使用<strong>cnpm install [name]</strong>来安装模块了，速度快很多。</p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>配置好<strong>Node.JS</strong>后，打开<strong>Git Bash</strong>的命令工具输入以下命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cnpm install hexo-cli -g</div><div class="line">cnpm install hexo --save</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="配置本地Hexo博客"><a href="#配置本地Hexo博客" class="headerlink" title="配置本地Hexo博客"></a>配置本地Hexo博客</h2><h3 id="初始化本地目录"><a href="#初始化本地目录" class="headerlink" title="初始化本地目录"></a>初始化本地目录</h3><p>随便新建个文件夹列如（D:\hexo-demo），使用<strong>Git Bash</strong>的命令工具进入该路径下，执行以下命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">hexo init</div><div class="line"></div><div class="line">#新建完成后，指定文件夹的目录如下</div><div class="line">.</div><div class="line">├── _config.yml</div><div class="line">├── package.json</div><div class="line">├── scaffolds</div><div class="line">├── scripts</div><div class="line">├── source</div><div class="line">|      └──posts</div><div class="line">└── themes</div></pre></td></tr></table></figure></p>
<h3 id="安装Hexo插件"><a href="#安装Hexo插件" class="headerlink" title="安装Hexo插件"></a>安装Hexo插件</h3><p>在本地博客根目录下使用<strong>Git Bash</strong>的命令工具执行以下命令:<br><figure class="highlight plain"><figcaption><span>install hexo-generator-index --save</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">cnpm install hexo-generator-archive --save</div><div class="line">cnpm install hexo-generator-category --save</div><div class="line">cnpm install hexo-generator-tag --save</div><div class="line">cnpm install hexo-server --save</div><div class="line">cnpm install hexo-deployer-git --save</div><div class="line">cnpm install hexo-deployer-heroku --save</div><div class="line">cnpm install hexo-deployer-rsync --save</div><div class="line">cnpm install hexo-deployer-openshift --save</div><div class="line">cnpm install hexo-renderer-marked@0.2 --save</div><div class="line">cnpm install hexo-renderer-stylus@0.2 --save</div><div class="line">cnpm install hexo-generator-feed@1 --save</div><div class="line">cnpm install hexo-generator-sitemap@1 --save</div></pre></td></tr></table></figure></p>
<h3 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h3><p>初始的时候可以见到配置下。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Hexo Configuration</span></div><div class="line"><span class="comment">## Docs: http://hexo.io/docs/configuration.html</span></div><div class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></div><div class="line"><span class="comment"># Site 站点配置</span></div><div class="line"><span class="attr">title:</span> Hexo-demo <span class="comment">#网站标题</span></div><div class="line"><span class="attr">subtitle:</span> hexo is simple and easy to study <span class="comment">#网站副标题</span></div><div class="line"><span class="attr">description:</span> this is hexo-demo <span class="comment">#网栈描述</span></div><div class="line"><span class="attr">author:</span> pomy <span class="comment">#你的名字</span></div><div class="line"><span class="attr">language:</span> zh-CN <span class="comment">#网站使用的语言</span></div><div class="line"><span class="attr">timezone:</span> Asia/Shanghai <span class="comment">#网站时区</span></div><div class="line"><span class="comment"># URL #可以不用配置</span></div><div class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class="line"><span class="attr">url:</span> http://yoursite.com <span class="comment">#网址，搜索时会在搜索引擎中显示</span></div><div class="line"><span class="attr">root:</span> / <span class="comment">#网站根目录</span></div><div class="line"><span class="attr">permalink:</span> :year/:month/:day/:title/ <span class="comment">#永久链接格式</span></div><div class="line"><span class="attr">permalink_defaults:</span> <span class="comment">#永久链接中各部分的默认值</span></div><div class="line"><span class="comment"># Directory 目录配置</span></div><div class="line"><span class="attr">source_dir:</span> source <span class="comment">#资源文件夹，这个文件夹用来存放内容</span></div><div class="line"><span class="attr">public_dir:</span> public <span class="comment">#公共文件夹，这个文件夹用于存放生成的站点文件</span></div><div class="line"><span class="attr">tag_dir:</span> tags <span class="comment">#标签文件夹</span></div><div class="line"><span class="attr">archive_dir:</span> archives <span class="comment">#归档文件夹</span></div><div class="line"><span class="attr">category_dir:</span> categories <span class="comment">#分类文件夹</span></div><div class="line"><span class="attr">code_dir:</span> downloads/code <span class="comment">#Include code 文件夹</span></div><div class="line"><span class="attr">i18n_dir:</span> :lang <span class="comment">#国际化文件夹</span></div><div class="line"><span class="attr">skip_render:</span> <span class="comment">#跳过指定文件的渲染，您可使用 glob 来配置路径</span></div><div class="line"><span class="comment"># Writing 写作配置</span></div><div class="line"><span class="attr">new_post_name:</span> :title.md <span class="comment"># 新文章的文件名称</span></div><div class="line"><span class="attr">default_layout:</span> post <span class="comment">#默认布局</span></div><div class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></div><div class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></div><div class="line"><span class="attr">filename_case:</span> <span class="number">0</span> <span class="comment">#把文件名称转换为 (1) 小写或 (2) 大写</span></div><div class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span> <span class="comment">#显示草稿</span></div><div class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span> <span class="comment">#是否启动资源文件夹</span></div><div class="line"><span class="attr">relative_link:</span> <span class="literal">false</span> <span class="comment">#把链接改为与根目录的相对位址</span></div><div class="line"><span class="attr">future:</span> <span class="literal">true</span></div><div class="line"><span class="attr">highlight:</span> <span class="comment">#代码块的设置</span></div><div class="line"><span class="attr">enable:</span> <span class="literal">true</span></div><div class="line"><span class="attr">line_number:</span> <span class="literal">true</span></div><div class="line"><span class="attr">auto_detect:</span> <span class="literal">true</span></div><div class="line"><span class="attr">tab_replace:</span></div><div class="line"><span class="comment"># Category &amp; Tag 分类 &amp; 标签</span></div><div class="line"><span class="attr">default_category:</span> uncategorized <span class="comment">#默认分类</span></div><div class="line"><span class="attr">category_map:</span> <span class="comment">#分类别名</span></div><div class="line"><span class="attr">tag_map:</span> <span class="comment">#标签别名</span></div><div class="line"><span class="comment"># Date / Time format 时间和日期</span></div><div class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></div><div class="line"><span class="comment">## You can customize the date format as defined in</span></div><div class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></div><div class="line"><span class="attr">date_format:</span> YYYY-MM-DD</div><div class="line"><span class="attr">time_format:</span> HH:mm:ss</div><div class="line"><span class="comment"># Pagination 分页</span></div><div class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></div><div class="line"><span class="attr">per_page:</span> <span class="number">10</span> <span class="comment">#每页显示的文章量 (0 = 关闭分页功能)</span></div><div class="line"><span class="attr">pagination_dir:</span> page <span class="comment">#分页目录</span></div><div class="line"><span class="comment"># Extensions 扩展</span></div><div class="line"><span class="comment">## Plugins: http://hexo.io/plugins/ 插件</span></div><div class="line"><span class="comment">## Themes: http://hexo.io/themes/ 主题</span></div><div class="line"><span class="attr">theme:</span> landscape <span class="comment">#当前主题名称</span></div><div class="line"><span class="comment"># Deployment #部署到github</span></div><div class="line"><span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></div><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">type:</span></div></pre></td></tr></table></figure></p>
<h3 id="本地查看效果"><a href="#本地查看效果" class="headerlink" title="本地查看效果"></a>本地查看效果</h3><p>继续执行以下命令，成功后可在浏览器输入localhost:4000查看效果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo server</div><div class="line">//the same as</div><div class="line">hexo s</div></pre></td></tr></table></figure></p>
<p>如果配置成功，即可在浏览器中看到<strong>hexo</strong>初始默认的<strong>hello world</strong>博文。</p>
<hr>
<h2 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h2><h3 id="新建repo"><a href="#新建repo" class="headerlink" title="新建repo"></a>新建repo</h3><p>在GitHub新建一个repo，名字为<strong>github-user-name.github.io</strong>，这是<strong>GitHub Pages</strong>的默认域名。然后使用<strong>git clone</strong>将repo下到本地。</p>
<h3 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h3><p>在本地博客根目录下使用<strong>Git Bash</strong>的命令工具执行以下命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo generate</div><div class="line">//the same as</div><div class="line">hexo g</div></pre></td></tr></table></figure></p>
<p>然后会在根目录下生成一个<strong>public</strong>文件夹，里面为博客对应的静态网页文件。将<strong>public</strong>文件夹下的所有文件/文件夹拷到刚刚新建repo的本地目录下，然后将所有内容<strong>publish</strong>到<strong>GitHub</strong>。然后就可以使用<strong><a href="https://github-user-name.github.io" target="_blank" rel="external">https://github-user-name.github.io</a></strong>就可以访问博客了，到这里博客就搭建完成了。</p>
<hr>
<h2 id="博客优化"><a href="#博客优化" class="headerlink" title="博客优化"></a>博客优化</h2><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p><strong>hexo</strong>博客有很多主题，如果喜欢折腾，可以将博客整得很好看，这里推荐使用<strong>NexT</strong>，也是我正在用的主题。其<strong>GitHub</strong>主页上面有很详细的说明。<br><a href="https://github.com/hexojs/hexo" target="_blank" rel="external">hexo</a><br><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">使用文档</a>        </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo 是一个简单地、轻量地、基于Node的一个静态博客框架，可以方便的生成静态网页托管在Github和Heroku上；GitHub Pages 可以被认为是用户编写的、托管在github上的静态网页。由于它的空间免费稳定，可以用于介绍托管在Github上的Project或者搭建网站。本文为一个简易的教程。&lt;br&gt;
    
    </summary>
    
      <category term="GitHub" scheme="http://yoursite.com/categories/GitHub/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/GitHub/Hexo/"/>
    
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="GitHub Pages" scheme="http://yoursite.com/tags/GitHub-Pages/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Image Gallery</title>
    <link href="http://yoursite.com/2017/01/02/Image%20Gallery/"/>
    <id>http://yoursite.com/2017/01/02/Image Gallery/</id>
    <published>2017-01-02T05:21:00.000Z</published>
    <updated>2017-01-02T13:27:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是《JavaScript DOM编程艺术》第四章的一个Demo，包括HTML，JavaScript和CSS，以图片库来演示DOM操作。<br><a id="more"></a></p>
<hr>
<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"gallery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"gallery.css"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Image gallery<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>SnapShots<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"images/Emma Roberts.jpg"</span> </span></div><div class="line">           <span class="attr">title</span>=<span class="string">"Emma Roberts"</span> </div><div class="line">           <span class="attr">onclick</span>=<span class="string">"showPic(this);return false;"</span>&gt;Emma Roberts<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"images/Emmy Rossum.jpg"</span> </span></div><div class="line">           <span class="attr">title</span>=<span class="string">"Emmy Rossum"</span> </div><div class="line">           <span class="attr">onclick</span>=<span class="string">"showPic(this);return false;"</span>&gt;Emmy Rossum<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"images/Eva Green.jpg"</span> </span></div><div class="line">           <span class="attr">title</span>=<span class="string">"Eva Green"</span> </div><div class="line">           <span class="attr">onclick</span>=<span class="string">"showPic(this);return false;"</span>&gt;Eva Green<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"images/Kaya Scodelario.jpg"</span> </span></div><div class="line">           <span class="attr">title</span>=<span class="string">"Kaya Scodelario"</span> </div><div class="line">           <span class="attr">onclick</span>=<span class="string">"showPic(this);return false;"</span>&gt;Kaya Scodelario<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"images/Kiriko Takemura.jpg"</span> </span></div><div class="line">           <span class="attr">title</span>=<span class="string">"Kiriko Takemura"</span> </div><div class="line">           <span class="attr">onclick</span>=<span class="string">"showPic(this);return false;"</span>&gt;Kiriko Takemura<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"images/Selena Gomez.jpg"</span> </span></div><div class="line">           <span class="attr">title</span>=<span class="string">"Selena Gomez"</span> </div><div class="line">           <span class="attr">onclick</span>=<span class="string">"showPic(this);return false;"</span>&gt;Selena Gomez<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"images/Sophie Turner.jpg"</span> </span></div><div class="line">           <span class="attr">title</span>=<span class="string">"Sophie Turner"</span> </div><div class="line">           <span class="attr">onclick</span>=<span class="string">"showPic(this);return false;"</span>&gt;Sophie Turner<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"placeholder"</span> </span></div><div class="line">         <span class="attr">src</span>=<span class="string">"images/startup.jpg"</span> </div><div class="line">         <span class="attr">alt</span>=<span class="string">"My Image gallery"</span> <span class="attr">width</span>=<span class="string">"30%"</span> <span class="attr">height</span>=<span class="string">"20%"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"description"</span>&gt;</span>Choose the actress you like.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showPic</span>(<span class="params">whichPic</span>)</span>&#123;</div><div class="line">    <span class="keyword">debugger</span>;</div><div class="line">    <span class="keyword">var</span> imageSource = whichPic.getAttribute(<span class="string">'href'</span>);</div><div class="line">    <span class="keyword">var</span> placeholder = <span class="built_in">document</span>.getElementById(<span class="string">'placeholder'</span>);</div><div class="line">    placeholder.setAttribute(<span class="string">'src'</span>,imageSource);</div><div class="line">    <span class="keyword">var</span> text = whichPic.getAttribute(<span class="string">'title'</span>);</div><div class="line">    <span class="keyword">var</span> description = <span class="built_in">document</span>.getElementById(<span class="string">'description'</span>);</div><div class="line">    description.firstChild.nodeValue = text;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span>&#123;</div><div class="line">    <span class="attribute">font-family</span>: Helvetica, Arial, sans-serif;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">1em</span> <span class="number">10%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">h1</span>&#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</div><div class="line">    <span class="attribute">background-color</span>: transparent;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">p</span>&#123;</div><div class="line">   <span class="attribute">font-family</span>: Helvetica, Arial, sans-serif; </div><div class="line">   <span class="attribute">color</span>: <span class="number">#c60</span>;</div><div class="line">   <span class="attribute">font-weight</span>: bold;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">a</span>&#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#c60</span>;</div><div class="line">    <span class="attribute">background-color</span>: transparent;</div><div class="line">    <span class="attribute">font-weight</span>: bold;</div><div class="line">    <span class="attribute">text-decoration</span>: none;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">ul</span>&#123;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">li</span>&#123;</div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">1em</span>;</div><div class="line">    <span class="attribute">list-style</span>: none;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">clear</span>: both;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p><a href="https://github.com/Cheng-Chao/Image-Gallery" target="_blank" rel="external">Image Gallery</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是《JavaScript DOM编程艺术》第四章的一个Demo，包括HTML，JavaScript和CSS，以图片库来演示DOM操作。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
      <category term="HTML" scheme="http://yoursite.com/categories/JavaScript/HTML/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Ajax常用写法</title>
    <link href="http://yoursite.com/2017/01/02/Ajax%E5%B8%B8%E7%94%A8%E5%86%99%E6%B3%95/"/>
    <id>http://yoursite.com/2017/01/02/Ajax常用写法/</id>
    <published>2017-01-02T02:23:00.000Z</published>
    <updated>2017-01-02T13:28:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>AJAX即“Asynchronous Javascript And XML”（异步JavaScript和XML），是指一种创建交互式网页应用的网页开发技术。AJAX 是一种用于创建快速动态网页的技术。通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。本文介绍了Ajax的常用写法，以及各个属性的解释说明，使之有一个大致的了解。<br><a id="more"></a></p>
<hr>
<h3 id="ajax"><a href="#ajax" class="headerlink" title="$.ajax"></a>$.ajax</h3><p>jQuery对象上面还定义了Ajax方法($.ajax())，用来处理Ajax操作。调用该方法后，浏览器就会向服务器发出一个HTTP请求。<br>$.ajax()的用法有多种，最常见的是提供一个对象参数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">  	<span class="attr">async</span>: <span class="literal">true</span>,</div><div class="line">  	<span class="attr">url</span>: <span class="string">'/url/to/json'</span>,</div><div class="line">  	<span class="attr">type</span>: <span class="string">'GET'</span>,</div><div class="line">  	<span class="attr">data</span> : &#123; <span class="attr">id</span> : <span class="number">123</span> &#125;,</div><div class="line">  	<span class="attr">dataType</span>: <span class="string">'json'</span>,</div><div class="line">  	<span class="attr">timeout</span>: <span class="number">30000</span>,</div><div class="line">  	<span class="attr">success</span>: successCallback,</div><div class="line">  	<span class="attr">error</span>: errorCallback,</div><div class="line">  	<span class="attr">complete</span>: completeCallback</div><div class="line">&#125;);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">successCallback</span>(<span class="params">json</span>) </span>&#123;</div><div class="line">    $(<span class="string">'&lt;h1/&gt;'</span>).text(json.title).appendTo(<span class="string">'body'</span>);</div><div class="line">&#125;,</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">errorCallback</span>(<span class="params">xhr, status</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'出问题了！'</span>);</div><div class="line">&#125;,</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">completeCallback</span>(<span class="params">xhr, status</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Ajax请求已结束。'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码的对象参数有多个属性，含义如下：<br><strong>async</strong>：该项默认为true，如果设为false，则表示发出的是同步请求。<br><strong>cache</strong>: 该项默认为true，如果设为false，则浏览器不缓存返回服务器返回的数据。注意，浏览器本身就不会缓存POST请求返回的数据，所以即使设为false，也只对HEAD和GET请求有效。<br><strong>url</strong>：服务器端网址。这是唯一必需的一个属性，其他属性都可以省略。<br><strong>type</strong>：向服务器发送信息所使用的HTTP动词，默认为GET，其他动词有POST、PUT、DELETE。<br><strong>dataType</strong>：向服务器请求的数据类型，可以设为text、html、script、json、jsonp和xml。<br><strong>data</strong>：向服务器发送的数据，如果使用GET方法，此项将转为查询字符串，附在网址的最后。<br><strong>success</strong>：请求成功时的回调函数，函数参数为服务器传回的数据、状态信息、发出请求的原始对象。<br><strong>timeout</strong>: 等待的最长毫秒数。如果过了这个时间，请求还没有返回，则自动将请求状态改为失败。<br><strong>error</strong>：请求失败时的回调函数，函数参数为发出请求的原始对象以及返回的状态信息。<br><strong>complete</strong>：不管请求成功或失败，都会执行的回调函数，函数参数为发出请求的原始对象以及返回的状态信息。<br>这些参数之中，url可以独立出来，作为ajax方法的第一个参数。也就是说，上面代码还可以写成下面这样。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$.ajax(<span class="string">'/url/to/json'</span>,&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'GET'</span>,</div><div class="line">  <span class="attr">dataType</span>: <span class="string">'json'</span>,</div><div class="line">  <span class="attr">success</span>: successCallback,</div><div class="line">  <span class="attr">error</span>: errorCallback,</div><div class="line">  <span class="attr">complete</span>: completeCallback</div><div class="line">&#125;);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">successCallback</span>(<span class="params">json</span>) </span>&#123;</div><div class="line">    $(<span class="string">'&lt;h1/&gt;'</span>).text(json.title).appendTo(<span class="string">'body'</span>);</div><div class="line">&#125;,</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">errorCallback</span>(<span class="params">xhr, status</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'出问题了！'</span>);</div><div class="line">&#125;,</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">completeCallback</span>(<span class="params">xhr, status</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Ajax请求已结束。'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="Ajax简便写法"><a href="#Ajax简便写法" class="headerlink" title="Ajax简便写法"></a>Ajax简便写法</h3><p>ajax方法还有一些简便写法。<br><strong>$.get()</strong> : 发出GET请求。<br><strong>$.getScript()</strong> : 读取一个JavaScript脚本文件并执行。<br><strong>$.getJSON()</strong> : 发出GET请求，读取一个JSON文件。<br><strong>$.post()</strong> : 发出POST请求。<br><strong>$.fn.load(</strong>) : 读取一个html文件，并将其放入当前元素之中。<br>一般来说，这些简便方法依次接受三个参数：url、数据、成功时的回调函数。</p>
<hr>
<h4 id="get"><a href="#get" class="headerlink" title="$.get()"></a>$.get()</h4><p>对应<strong>HTTP</strong>的<strong>GET</strong>方法。<br>get方法接受两个参数，分别为服务器端网址和请求成功后的回调函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$.get(<span class="string">'/data/people.html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">html</span>)</span>&#123;</div><div class="line">  $(<span class="string">'#target'</span>).html(html);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<hr>
<h4 id="post"><a href="#post" class="headerlink" title="$.post()"></a>$.post()</h4><p>对应<strong>HTTP</strong>的<strong>POST</strong>方法。<br>post方法接受三个参数，服务器端网址、发给服务器的数据和请求成功后的回调函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$.post(<span class="string">'/data/save'</span>, &#123;<span class="attr">name</span>: <span class="string">'Rebecca'</span>&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">resp</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(resp));</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<hr>
<h4 id="getJSON"><a href="#getJSON" class="headerlink" title="$.getJSON()"></a>$.getJSON()</h4><p>ajax方法的另一个简便写法是getJSON方法。当服务器端返回JSON格式的数据，可以用这个方法代替$.ajax方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$.getJSON(<span class="string">'url/to/json'</span>, &#123;<span class="string">'a'</span>: <span class="number">1</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(data);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>上面的代码等同于下面的写法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">  <span class="attr">dataType</span>: <span class="string">"json"</span>,</div><div class="line">  <span class="attr">url</span>: <span class="string">'/url/to/data'</span>,</div><div class="line">  <span class="attr">data</span>: &#123;<span class="string">'a'</span>: <span class="number">1</span>&#125;,</div><div class="line">  <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(data);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<hr>
<h4 id="getScript"><a href="#getScript" class="headerlink" title="$.getScript()"></a>$.getScript()</h4><p>$.getScript方法用于从服务器端加载一个脚本文件。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$.getScript(<span class="string">'/static/js/myScript.js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    functionFromMyScript();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>上面代码先从服务器加载myScript.js脚本，然后在回调函数中执行该脚本提供的函数。<br>getScript的回调函数接受三个参数，分别是脚本文件的内容，HTTP响应的状态信息和ajax对象实例。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$.getScript( <span class="string">"ajax/test.js"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data, textStatus, jqxhr</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log( data ); <span class="comment">// test.js的内容</span></div><div class="line">  <span class="built_in">console</span>.log( textStatus ); <span class="comment">// Success</span></div><div class="line">  <span class="built_in">console</span>.log( jqxhr.status ); <span class="comment">// 200</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>getScript是ajax方法的简便写法，因此返回的是一个deferred对象，可以使用deferred接口。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">jQuery.getScript(<span class="string">"/path/to/myscript.js"</span>)</div><div class="line">    .done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;)</div><div class="line">    .fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<hr>
<h4 id="fn-load"><a href="#fn-load" class="headerlink" title="$.fn.load()"></a>$.fn.load()</h4><p>$.fn.load不是jQuery的工具方法，而是定义在jQuery对象实例上的方法，用于获取服务器端的HTML文件，将其放入当前元素。由于该方法也属于ajax操作，所以放在这里一起讲。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#newContent'</span>).load(<span class="string">'/foo.html'</span>);</div></pre></td></tr></table></figure></p>
<p>$.fn.load方法还可以指定一个选择器，将远程文件中匹配选择器的部分，放入当前元素，并指定操作完成时的回调函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#newContent'</span>).load(<span class="string">'/foo.html #myDiv h1:first'</span>,</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'内容更新！'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>上面代码只加载foo.html中匹配“#myDiv h1:first”的部分，加载完成后会运行指定的回调函数。</p>
<hr>
<h3 id="Ajax事件"><a href="#Ajax事件" class="headerlink" title="Ajax事件"></a>Ajax事件</h3><p><strong>jQuery</strong>提供以下一些方法，用于指定特定的AJAX事件的回调函数。<br><strong>.ajaxComplete()</strong> : ajax请求完成。<br><strong>.ajaxError()</strong> : ajax请求出错。<br><strong>.ajaxSend()</strong> : ajax请求发出之前。<br><strong>.ajaxStart()</strong> : 第一个ajax请求开始发出，即没有还未完成ajax请求。<br><strong>.ajaxStop()</strong> : 所有ajax请求完成之后。<br><strong>.ajaxSuccess()</strong> : ajax请求成功之后。<br>下面是示例。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#loading_indicator'</span>)</div><div class="line">.ajaxStart(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;$(<span class="keyword">this</span>).show();&#125;)</div><div class="line">.ajaxStop(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;$(<span class="keyword">this</span>).hide();&#125;);</div><div class="line">$(<span class="string">'#loading_indicator'</span>)</div><div class="line">.ajaxStart(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;$(<span class="keyword">this</span>).show();&#125;)</div><div class="line">.ajaxStop(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;$(<span class="keyword">this</span>).hide();&#125;);</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>ajax方法返回的是一个deferred对象，可以用then方法为该对象指定回调函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">  <span class="attr">url</span>: <span class="string">'/data/people.json'</span>,</div><div class="line">  <span class="attr">dataType</span>: <span class="string">'json'</span></div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">resp</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(resp.people);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>由于浏览器存在“同域限制”，ajax方法只能向当前网页所在的域名发出HTTP请求。但是，通过在当前网页中插入script元素（\<script>），可以向不同的域名发出GET请求，这种变通方法叫做JSONP（JSON with Padding）。<br>ajax方法可以发出JSONP请求，方法是在对象参数中指定dataType为JSONP。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">  <span class="attr">url</span>: <span class="string">'/data/search.jsonp'</span>,</div><div class="line">  <span class="attr">data</span>: &#123;<span class="attr">q</span>: <span class="string">'a'</span>&#125;,</div><div class="line">  <span class="attr">dataType</span>: <span class="string">'jsonp'</span>,</div><div class="line">  <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">resp</span>) </span>&#123;</div><div class="line">    $(<span class="string">'#target'</span>).html(<span class="string">'Results: '</span> + resp.results.length);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>JSONP的通常做法是，在所要请求的URL后面加在回调函数的名称。ajax方法规定，如果所请求的网址以类似“callback=?”的形式结尾，则自动采用JSONP形式。所以，上面的代码还可以写成下面这样。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$.getJSON(<span class="string">'/data/search.jsonp?q=a&amp;callback=?'</span>,</div><div class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">resp</span>) </span>&#123;</div><div class="line">    $(<span class="string">'#target'</span>).html(<span class="string">'Results: '</span> + resp.results.length);</div><div class="line">  &#125;</div><div class="line">);</div></pre></td></tr></table></figure></p>
</script></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AJAX即“Asynchronous Javascript And XML”（异步JavaScript和XML），是指一种创建交互式网页应用的网页开发技术。AJAX 是一种用于创建快速动态网页的技术。通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。本文介绍了Ajax的常用写法，以及各个属性的解释说明，使之有一个大致的了解。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
      <category term="Ajax" scheme="http://yoursite.com/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>jQuery常用方法</title>
    <link href="http://yoursite.com/2017/01/01/jQuery%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2017/01/01/jQuery常用方法/</id>
    <published>2017-01-01T15:54:00.000Z</published>
    <updated>2017-01-02T13:30:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>jQuery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀的JavaScript代码库（JavaScript框架）。jQuery设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，优化HTML文档操作、事件处理、动画设计和Ajax交互。jQuery的核心特性可以总结为:具有独特的链式语法和短小清晰的多功能接口；具有高效灵活的css选择器，并且可对CSS选择器进行扩展；拥有便捷的插件扩展机制和丰富的插件。本文总结了jQuery常用的方法，辅以代码说明。<br><a id="more"></a></p>
<hr>
<h3 id="trim"><a href="#trim" class="headerlink" title="$.trim"></a>$.trim</h3><p>$.trim方法用于移除字符串头部和尾部多余的空格。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$.trim(<span class="string">'  Hello  '</span>); <span class="comment">// Hello</span></div></pre></td></tr></table></figure></p>
<hr>
<h3 id="contains"><a href="#contains" class="headerlink" title="$.contains"></a>$.contains</h3><p>$.contains方法返回一个布尔值，表示某个DOM元素（第二个参数）是否为另一个DOM元素（第一个参数）的下级元素。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$.contains(<span class="built_in">document</span>.documentElement, <span class="built_in">document</span>.body);  <span class="comment">// true</span></div><div class="line">$.contains(<span class="built_in">document</span>.body, <span class="built_in">document</span>.documentElement);  <span class="comment">// false</span></div></pre></td></tr></table></figure></p>
<hr>
<h3 id="each"><a href="#each" class="headerlink" title="$.each"></a>$.each</h3><p>$.each方法用于遍历数组和对象，然后返回原始对象。它接受两个参数，分别是数据集合和回调函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$.each([ <span class="number">52</span>, <span class="number">97</span> ], <span class="function"><span class="keyword">function</span>(<span class="params"> index, value </span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log( index + <span class="string">": "</span> + value );</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 0: 52 </span></div><div class="line"><span class="comment">// 1: 97 </span></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  <span class="attr">p1</span>: <span class="string">"hello"</span>,</div><div class="line">  <span class="attr">p2</span>: <span class="string">"world"</span></div><div class="line">&#125;;</div><div class="line">$.each( obj, <span class="function"><span class="keyword">function</span>(<span class="params"> key, value </span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log( key + <span class="string">": "</span> + value );</div><div class="line">&#125;);</div><div class="line"><span class="comment">// p1: hello</span></div><div class="line"><span class="comment">// p2: world</span></div></pre></td></tr></table></figure></p>
<p>需要注意的，jQuery对象实例也有一个each方法（$.fn.each），两者的作用差不多。</p>
<hr>
<h3 id="map"><a href="#map" class="headerlink" title="$.map"></a>$.map</h3><p>$.map方法也是用来遍历数组和对象，但是会返回一个新对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>];</div><div class="line">a = $.map(a, <span class="function"><span class="keyword">function</span> (<span class="params">n, i</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> (n.toUpperCase() + i);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// ["A0", "B1", "C2", "D3", "E4"]</span></div></pre></td></tr></table></figure></p>
<hr>
<h3 id="inArray"><a href="#inArray" class="headerlink" title="$.inArray"></a>$.inArray</h3><p>$.inArray方法返回一个值在数组中的位置（从0开始）。如果该值不在数组中，则返回-1。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line">$.inArray(<span class="number">4</span>,a); <span class="comment">// 3</span></div></pre></td></tr></table></figure></p>
<hr>
<h3 id="extend"><a href="#extend" class="headerlink" title="$.extend"></a>$.extend</h3><p>$.extend方法用于将多个对象合并进第一个对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o1 = &#123;<span class="attr">p1</span>:<span class="string">'a'</span>,<span class="attr">p2</span>:<span class="string">'b'</span>&#125;;</div><div class="line"><span class="keyword">var</span> o2 = &#123;<span class="attr">p1</span>:<span class="string">'c'</span>&#125;;</div><div class="line">$.extend(o1,o2);</div><div class="line">o1.p1; <span class="comment">// "c"</span></div></pre></td></tr></table></figure></p>
<p>$.extend的另一种用法是生成一个新对象，用来继承原有对象。这时，它的第一个参数应该是一个空对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o1 = &#123;<span class="attr">p1</span>:<span class="string">'a'</span>,<span class="attr">p2</span>:<span class="string">'b'</span>&#125;;</div><div class="line"><span class="keyword">var</span> o2 = &#123;<span class="attr">p1</span>:<span class="string">'c'</span>&#125;;</div><div class="line"><span class="keyword">var</span> o = $.extend(&#123;&#125;,o1,o2);</div><div class="line">o; <span class="comment">// Object &#123;p1: "c", p2: "b"&#125;</span></div></pre></td></tr></table></figure></p>
<p>默认情况下，extend方法生成的对象是“浅拷贝”，也就是说，如果某个属性是对象或数组，那么只会生成指向这个对象或数组的指针，而不会复制值。如果想要“深拷贝”，可以在extend方法的第一个参数传入布尔值true。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o1 = &#123;<span class="attr">p1</span>:[<span class="string">'a'</span>,<span class="string">'b'</span>]&#125;;</div><div class="line"><span class="keyword">var</span> o2 = $.extend(&#123;&#125;,o1);</div><div class="line"><span class="keyword">var</span> o3 = $.extend(<span class="literal">true</span>,&#123;&#125;,o1);</div><div class="line">o1.p1[<span class="number">0</span>]=<span class="string">'c'</span>;</div><div class="line">o2.p1; <span class="comment">// ["c", "b"]</span></div><div class="line">o3.p1; <span class="comment">// ["a", "b"]</span></div></pre></td></tr></table></figure></p>
<p>上面代码中，o2是浅拷贝，o3是深拷贝。结果，改变原始数组的属性，o2会跟着一起变，而o3不会。</p>
<p>也就是说浅拷贝类似双向绑定。</p>
<hr>
<h3 id="proxy"><a href="#proxy" class="headerlink" title="$.proxy"></a>$.proxy</h3><p>$.proxy方法类似于ECMAScript 5的bind方法，可以绑定函数的上下文（也就是this对象）和参数，返回一个新函数。<br>jQuery.proxy()的主要用处是为回调函数绑定上下文对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">"object"</span>,</div><div class="line">    <span class="attr">test</span>: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.type);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">$(<span class="string">"#button"</span>).on(<span class="string">"click"</span>, o.test); <span class="comment">// 无输出</span></div><div class="line"> $(<span class="string">"#button"</span>).on(<span class="string">"click"</span>, $.proxy(o.test, o)); <span class="comment">// object</span></div></pre></td></tr></table></figure></p>
<p>上面的代码中，第一个回调函数没有绑定上下文，所以结果为空，没有任何输出；第二个回调函数将上下文绑定为对象o，结果就为object。<br>这个例子的另一种等价的写法是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#button"</span>).on( <span class="string">"click"</span>, $.proxy(o, test));</div></pre></td></tr></table></figure></p>
<p>上面代码的$.proxy(o, test)的意思是，将o的方法test与o绑定。<br>这个例子表明，proxy方法的写法主要有两种。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">jQuery.proxy(<span class="function"><span class="keyword">function</span>, <span class="title">context</span>);</span></div><div class="line">// <span class="title">or</span></div><div class="line"><span class="title">jQuery</span>.<span class="title">proxy</span>(<span class="params">context, name</span>);</div></pre></td></tr></table></figure></p>
<p>第一种写法是为函数（function）指定上下文对象（context），第二种写法是指定上下文对象（context）和它的某个方法名（name）。<br>再看一个例子。正常情况下，下面代码中的this对象指向发生click事件的DOM对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#myElement'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="keyword">this</span>).addClass(<span class="string">'aNewClass'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>如果我们想让回调函数延迟运行，使用setTimeout方法，代码就会出错，因为setTimeout使得回调函数在全局环境运行，this将指向全局对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#myElement'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).addClass(<span class="string">'aNewClass'</span>);</div><div class="line">    &#125;, <span class="number">1000</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>上面代码中的this，将指向全局对象window，导致出错。这时，就可以用proxy方法，将this对象绑定到myElement对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#myElement'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    setTimeout($.proxy(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).addClass(<span class="string">'aNewClass'</span>); </div><div class="line">    &#125;, <span class="keyword">this</span>), <span class="number">1000</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="data"><a href="#data" class="headerlink" title="$.data"></a>$.data</h3><p>$.data方法可以用来在DOM节点上储存数据。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 存入数据</span></div><div class="line">$.data(<span class="built_in">document</span>.body, <span class="string">"foo"</span>, <span class="number">52</span> );</div><div class="line"><span class="comment">// 读取数据</span></div><div class="line">$.data(<span class="built_in">document</span>.body, <span class="string">"foo"</span>);</div><div class="line"><span class="comment">// 读取所有数据</span></div><div class="line">$.data(<span class="built_in">document</span>.body);</div></pre></td></tr></table></figure></p>
<p>上面代码在网页元素body上储存了一个键值对，键名为“foo”，键值为52。<br>$.removeData方法用于移除所存储的数据。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$.data(div, <span class="string">"test1"</span>, <span class="string">"VALUE-1"</span>);</div><div class="line">$.removeData(div, <span class="string">"test1"</span>);</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="parseHTML"><a href="#parseHTML" class="headerlink" title="$.parseHTML"></a>$.parseHTML</h3><p>$.parseHTML方法用于将字符串解析为DOM对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> html = $.parseHTML(<span class="string">"hello, &lt;b&gt;my name is&lt;/b&gt; jQuery."</span>);</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="parseJSON"><a href="#parseJSON" class="headerlink" title="$.parseJSON"></a>$.parseJSON</h3><p>$.parseJSON方法用于将JSON字符串解析为JavaScript对象，作用与原生的JSON.parse()类似。但是，jQuery没有提供类似JSON.stringify()的方法，即不提供将JavaScript对象转为JSON对象的方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = $.parseJSON(<span class="string">'&#123;"name": "John"&#125;'</span>);</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="parseXML"><a href="#parseXML" class="headerlink" title="$.parseXML"></a>$.parseXML</h3><p>$.parseXML方法用于将字符串解析为XML对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xml = <span class="string">"&lt;rss version='2.0'&gt;&lt;channel&gt;&lt;title&gt;RSS Title&lt;/title&gt;&lt;/channel&gt;&lt;/rss&gt;"</span>;</div><div class="line"><span class="keyword">var</span> xmlDoc = $.parseXML(xml);</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="makeArray"><a href="#makeArray" class="headerlink" title="$.makeArray"></a>$.makeArray</h3><p>$.makeArray方法将一个类似数组的对象，转化为真正的数组。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = $.makeArray(<span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>));</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="merge"><a href="#merge" class="headerlink" title="$.merge"></a>$.merge</h3><p>$.merge方法用于将一个数组（第二个参数）合并到另一个数组（第一个参数）之中。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a1 = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>];</div><div class="line"><span class="keyword">var</span> a2 = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line">$.merge(a1, a2);</div><div class="line">a1;</div><div class="line"><span class="comment">// [0, 1, 2, 2, 3, 4]</span></div></pre></td></tr></table></figure></p>
<hr>
<h3 id="now"><a href="#now" class="headerlink" title="$.now"></a>$.now</h3><p>$.now方法返回当前时间距离1970年1月1日00:00:00 UTC对应的毫秒数，等同于(new Date).getTime()，即时间戳。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$.now();</div><div class="line"><span class="comment">//1480860477 2016年12月04日 22:07:57</span></div></pre></td></tr></table></figure></p>
<hr>
<h3 id="判断数据类型的方法"><a href="#判断数据类型的方法" class="headerlink" title="判断数据类型的方法"></a>判断数据类型的方法</h3><p>jQuery提供一系列工具方法，用来判断数据类型，以弥补JavaScript原生的<strong>typeof</strong>运算符的不足。以下方法对参数进行判断，返回一个布尔值。<br><strong>jQuery.isArray()</strong>：是否为数组。<br><strong>jQuery.isEmptyObject()</strong>：是否为空对象（不含可枚举的属性）。<br><strong>jQuery.isFunction()</strong>：是否为函数。<br><strong>jQuery.isNumeric()</strong>：是否为数组。<br><strong>jQuery.isPlainObject()</strong>：是否为使用“{}”或“new Object”生成的对象，而不是浏览器原生提供的对象。<br><strong>jQuery.isWindow()</strong>：是否为window对象。<br><strong>jQuery.isXMLDoc()</strong>：判断一个DOM节点是否处于XML文档之中。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$.isEmptyObject(&#123;&#125;); <span class="comment">// true</span></div><div class="line">$.isPlainObject(<span class="built_in">document</span>.location); <span class="comment">// false</span></div><div class="line">$.isWindow(<span class="built_in">window</span>); <span class="comment">// true</span></div><div class="line">$.isXMLDoc(<span class="built_in">document</span>.body); <span class="comment">// false</span></div></pre></td></tr></table></figure></p>
<p>除了上面这些方法以外，还有一个<strong>$.type</strong>方法，可以返回一个变量的数据类型。它的实质是用<strong>Object.prototype.toString</strong>方法读取对象内部的[[Class]]属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$.type(<span class="regexp">/test/</span>); <span class="comment">// "regexp"</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jQuery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀的JavaScript代码库（JavaScript框架）。jQuery设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，优化HTML文档操作、事件处理、动画设计和Ajax交互。jQuery的核心特性可以总结为:具有独特的链式语法和短小清晰的多功能接口；具有高效灵活的css选择器，并且可对CSS选择器进行扩展；拥有便捷的插件扩展机制和丰富的插件。本文总结了jQuery常用的方法，辅以代码说明。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
</feed>
